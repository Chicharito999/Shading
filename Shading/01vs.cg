uniform float3 LightPosition=float3(10.0,2.0,10.0); //光源位置
uniform float3 eyePosition=float3(0.0,0.0,5.0);   //相机位置
uniform float3 I=float3(1.0,1.0,1.0);              //光强度
uniform float3 Ka=float3(0.15,0.15,0.0);             //环境光反射系数×物体表面对环境光的反射分量
uniform float3 Kd=float3(0.5,0.5,0.0);             //漫反射系数×物体表面对漫反射光的反射分量
uniform float3 Ks=float3(0.5,0.5,0.5);             //镜面反射系数×物体表面对镜面反射光的反射分量
uniform float shininess=32.0;      //镜面高光系数n幂次
 
struct output
{
      float4 position : POSITION; 
      float4 color     : COLOR; 
};
 
output vs_main( float4 position : POSITION,
                     float3 normal   : NORMAL,
                     uniform float4x4 MV, // 在相机坐标系中计算，所以要用到ModelView变换矩阵
                     uniform float4x4 MVP // ModelViewProjection变换矩阵，变换到裁剪坐标
                    )
{
      output OUT;
      OUT.position = mul(MVP, position);
 
      float3 N = normalize(mul(MV, float4(normal,0.0)) ).xyz; //转换法线到相机坐标系
      float3 P = mul(MV, position).xyz; //转换物体顶点到相机坐标系
 
      float3 L = normalize(LightPosition - P);
      float NdotL = max(dot(N,L),0); //判断法线和入射光线的角度是否大于90度
 
      float3 ambient = Ka * I; //环境反射
      float3 diffuse = Kd * I * NdotL; //漫反射
 
      float3 V = normalize(eyePosition - P);
	  float3 R=reflect(-L,N);//计算反射光线向量
	  R=normalize(R);
	  
     // float3 H = normalize(L+V); //half vector
     // float NdotH = pow(max(dot(N,H), 0), shininess);
	  float NdotH = pow(max(dot(V,R), 0), shininess);
      if(NdotL<=0) NdotH = 0.0;
 
      float3 specular = Ks*I*NdotH; //镜面反射
 
      float3 color = ambient + diffuse +specular; //所有成分相加
      OUT.color.xyz= color;
      OUT.color.w = 1.0;
 
      return OUT;
}
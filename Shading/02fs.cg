uniform float3 LightPosition=float3(2.0,2.0,2.0); //光源位置
uniform float3 eyePosition=float3(0.0,0.0,5.0);   //相机位置
uniform float3 I=float3(1.0,1.0,1.0);              //光强度
uniform float3 Ka=float3(0.15,0.15,0.0);             //环境光反射系数×物体表面对环境光的反射分量
uniform float3 Kd=float3(0.5,0.5,0.0);             //漫反射系数×物体表面对漫反射光的反射分量
uniform float3 Ks=float3(0.5,0.5,0.5);             //镜面反射系数×物体表面对镜面反射光的反射分量
uniform float shininess=32.0;      //镜面高光系数n幂次
 
struct input{//传入每个顶点的在相机坐标的位置信息和法向量，插值得到每个像素点的
      float3 objectPos: TEXCOORD0;   
      float3 normal   : TEXCOORD1;
};
 
struct output{
      float4 color     : COLOR;
};
 
output fs_main( in input IN )//为每个像素点计算color
{
      output OUT;
 
      float3 N = normalize(IN.normal);
      float3 P = IN.objectPos;
 
      float3 L = normalize(LightPosition - P);
      float NdotL = max(dot(N,L),0);
 
      float3 ambient = Ka * I;
      float3 diffuse = Kd * I * NdotL;
 
      float3 V = normalize(eyePosition - P);
	  
	  float3 R=reflect(-L,N);//计算反射光线向量
	  R=normalize(R);
	  
    //  float3 H = normalize(L+V);
    //  float NdotH = pow(max(dot(N,H), 0), shininess);
      float NdotH = pow(max(dot(V,R), 0), shininess);
      if(NdotL<=0)
           NdotH = 0.0;
      float3 specular = Ks*I*NdotH;
 
      float3 color = ambient + diffuse + specular;
      OUT.color.xyz= color;
      OUT.color.w = 1.0;
 
      return OUT;
}